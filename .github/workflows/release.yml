name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1

      - name: Verify Chocolatey Installation
        run: choco --version

      - name: Run GoReleaser (without scoop publishing)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --skip=chocolatey
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}

      - name: Check what GoReleaser created
        run: |
          echo "📁 Checking dist directory contents..."
          if (Test-Path 'dist') {
            Write-Host "✅ dist folder exists!"
            Get-ChildItem -Path 'dist' -Recurse | Select-Object FullName, Length
          } else {
            Write-Host "❌ dist folder not found!"
          }

          echo ""
          echo "🔍 Looking for scoop manifest..."
          if (Test-Path 'dist/scoop/zed-cli-win-unofficial.json') {
            Write-Host "✅ Scoop manifest found!"
            Write-Host "📦 Original manifest contents:"
            Get-Content 'dist/scoop/zed-cli-win-unofficial.json' | Write-Host
          } else {
            Write-Host "❌ Scoop manifest not found in expected location"
            Write-Host "📁 Checking what's in dist/scoop/:"
            if (Test-Path 'dist/scoop') {
              Get-ChildItem 'dist/scoop' | Write-Host
            } else {
              Write-Host "❌ dist/scoop directory doesn't exist"
            }
          }
        shell: powershell

      - name: Fix Scoop Manifest (Test - Log Only)
        run: |
          echo "🔧 Testing scoop manifest fix..."

          if (Test-Path 'dist/scoop/zed-cli-win-unofficial.json') {
            Write-Host "✅ Found scoop manifest, reading contents..."
            $manifest = Get-Content 'dist/scoop/zed-cli-win-unofficial.json' | ConvertFrom-Json
            
            Write-Host "📋 Current bin array:"
            $manifest.architecture."64bit".bin | ForEach-Object { Write-Host "  - $_" }
            
            # Add zed.bat to bin array
            $manifest.architecture."64bit".bin += "zed-cli-win-unofficial/zed.bat"
            
            Write-Host ""
            Write-Host "📋 Updated bin array would be:"
            $manifest.architecture."64bit".bin | ForEach-Object { Write-Host "  - $_" }
            
            # Convert to JSON for preview
            $jsonContent = $manifest | ConvertTo-Json -Depth 10
            
            Write-Host ""
            Write-Host "📄 Complete updated manifest would be:"
            Write-Host $jsonContent
            
            Write-Host ""
            Write-Host "✅ Scoop manifest fix test successful!"
            
            # Create bucket directory for testing
            if (-not (Test-Path 'bucket')) {
              New-Item -ItemType Directory -Path 'bucket'
              Write-Host "📁 Created bucket directory (for testing)"
            }
            
            # Save the fixed manifest (just for logging, not committing)
            $jsonContent | Set-Content 'bucket/zed-cli-win-unofficial.json'
            Write-Host "💾 Saved fixed manifest to bucket/ (for testing)"
            
          } else {
            Write-Host "❌ Scoop manifest not found"
            exit 1
          }
        shell: powershell

      - name: Show what would be committed
        run: |
          echo "📊 Summary of what would be committed to repository:"
          echo ""

          if (Test-Path 'bucket/zed-cli-win-unofficial.json') {
            Write-Host "✅ bucket/zed-cli-win-unofficial.json"
            Write-Host "   Size: $((Get-Item 'bucket/zed-cli-win-unofficial.json').Length) bytes"
            Write-Host ""
            Write-Host "📄 File contents that would be committed:"
            Get-Content 'bucket/zed-cli-win-unofficial.json' | Write-Host
          } else {
            Write-Host "❌ No manifest file to commit"
          }

          echo ""
          Write-Host "🚀 In a real release, this would:"
          Write-Host "  1. Create/update bucket/zed-cli-win-unofficial.json"
          Write-Host "  2. Commit with message: 'Scoop update for zed-cli-win-unofficial version ${{ github.ref_name }}'"
          Write-Host "  3. Push to main branch"
          Write-Host ""
          Write-Host "ℹ️ To enable actual committing, update the workflow to include git commands"
        shell: powershell
