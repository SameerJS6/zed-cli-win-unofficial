{
    "version": "1.0.0",
    "architecture": {
        "64bit": {
            "url": "https://github.com/SameerJS6/zed-cli-win-unofficial/releases/download/v1.0.0/zed-cli-win-unofficial_v1.0.0x86_64.zip",
            "bin": [
                "zed-cli-win-unofficial/zed-cli-win-unofficial.exe", "zed-cli-win-unofficial/zed.bat"
            ],
            "hash": "42a75bd61131e0de0cbbb24c0f899e7a906683e9a9c78bbdd6c171a90dfdad5e"
        }
    },
    "homepage": "https://zedcli.sameerjs.com",
    "license": "MIT",
    "description": "An unofficial Windows CLI launcher for Zed editor that provides:\n\n* Configurable zed.exe path detection\n* Launching \u0026 Managing mulitple instance of zed\n* Path launching with 'zed .' to open directories\n* Running 'zed' without arguments opens the last project\n* Integration with Windows context menu (Open with Zed)\n* Environment variable parsing for installation paths\n\nThis tool is not affiliated with or endorsed by the Zed team.\n",
    "post_install": [
        "Write-Host 'Zed CLI installed successfully!' -ForegroundColor Green",
        "Write-Host 'Sending a small analytics event to help us understand usage patterns. No personal data is collected â€” nothing to worry about!' -ForegroundColor Blue",
        "try { $apiUrl = 'https://zedcli.sameerjs.com/api/analytics'; $eventType = 'scoop_installation_completed'; $machineId = \"$env:COMPUTERNAME-$env:USERNAME\"; $hasher = [System.Security.Cryptography.MD5]::Create(); $hashBytes = $hasher.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($machineId)); $anonymousUserId = [System.BitConverter]::ToString($hashBytes).Replace('-', '').Substring(0, 16); $sessionId = [System.Guid]::NewGuid().ToString(); $analyticsData = @{ event = \"zed_win_cli_$eventType\"; properties = @{ project = 'zed-cli-win-unofficial'; os = 'windows'; os_version = (Get-CimInstance Win32_OperatingSystem).Caption; arch = $env:PROCESSOR_ARCHITECTURE; session_id = $sessionId; user_id = $anonymousUserId.ToLower(); timestamp = $(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ'); cli_version = 'v1.0.0'; install_method = 'scoop'; installer_type = 'scoop_cli_only'; powershell_version = $PSVersionTable.PSVersion.ToString(); is_admin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator') } } | ConvertTo-Json; $job = Start-Job -ScriptBlock { param($url, $data); try { Invoke-RestMethod -Uri $url -Method Post -Body $data -ContentType 'application/json' -TimeoutSec 3 -ErrorAction SilentlyContinue } catch { } } -ArgumentList $apiUrl, $analyticsData; Register-ObjectEvent -InputObject $job -EventName StateChanged -Action { if ($Event.Sender.State -eq 'Completed' -or $Event.Sender.State -eq 'Failed') { Remove-Job $Event.Sender -Force -ErrorAction SilentlyContinue; Unregister-Event $Event.SourceIdentifier -ErrorAction SilentlyContinue } } | Out-Null } catch { }"
    ]
}